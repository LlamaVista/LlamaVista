{"version":3,"sources":["components/img/Summary.tsx","components/img/Infograpic.tsx","components/img/Repair.tsx","components/main/FeatureGrid.tsx"],"names":["Summary","_useAnimate","useAnimate","_useAnimate2","_slicedToArray","scope","animate","isInView","useInView","useEffect","pathLength","duration","delay","React","createElement","motion","svg","viewBox","fill","xmlns","ref","path","d","stroke","stroke-width","stroke-linecap","stroke-linejoin","Infograpic","Repair","FeatuersGridContainer","styled","div","_templateObject","_taggedTemplateLiteral","props","theme","device","laptop","tablet","mobile","GridColumn","_templateObject2","GridContent","_templateObject3","ImgWrapper","_templateObject4","FeatureTitle","_templateObject5","mainPage","mostHighlightColor","FeatureDiscription","_templateObject6","textColor","FeatureGrid","Fragment","className","data-colums"],"mappings":"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","file":"static/js/4.1ce1c244.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport {\n  motion,\n  useAnimate,\n  useInView,\n} from 'framer-motion/dist/framer-motion';\n\nfunction Summary() {\n  const [scope, animate] = useAnimate();\n  const isInView = useInView(scope);\n\n  useEffect(() => {\n    if (isInView) {\n      animate('path', { pathLength: 1 }, { duration: 1.8, delay: 1 });\n    }\n  }, [isInView]);\n\n  return (\n    <motion.svg\n      viewBox=\"0 0 100 100\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      ref={scope}\n    >\n      <motion.path\n        pathLength={0}\n        d=\"M78.1084 9.375H9.3584C7.7008 9.375 6.11108 10.0335 4.93898 11.2056C3.76688 12.3777 3.1084 13.9674 3.1084 15.625V84.375C3.1084 86.0326 3.76688 87.6223 4.93898 88.7944C6.11108 89.9665 7.7008 90.625 9.3584 90.625H84.3584C86.016 90.625 87.6057 89.9665 88.7778 88.7944C89.9499 87.6223 90.6084 86.0326 90.6084 84.375V46.875M3.1084 28.125H56.2334\"\n        stroke=\"white\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M21.8584 53.125H40.6084M21.8584 71.875H62.4834M94.9251 26.9375L71.0792 50.7833L59.3584 53.125L61.7042 41.4083L85.5501 17.5625C86.1634 16.9483 86.8919 16.4611 87.6937 16.1287C88.4955 15.7962 89.355 15.6251 90.223 15.6251C91.091 15.6251 91.9505 15.7962 92.7523 16.1287C93.5541 16.4611 94.2825 16.9483 94.8959 17.5625L94.9251 17.5875C96.1637 18.8281 96.8594 20.5095 96.8594 22.2625C96.8594 24.0155 96.1637 25.6969 94.9251 26.9375Z\"\n        stroke=\"#A259FF\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n    </motion.svg>\n  );\n}\n\nexport default Summary;\n","import React, { useEffect } from 'react';\nimport {\n  motion,\n  useAnimate,\n  useInView,\n} from 'framer-motion/dist/framer-motion';\n\nfunction Infograpic() {\n  const [scope, animate] = useAnimate();\n  const isInView = useInView(scope);\n\n  useEffect(() => {\n    if (isInView) {\n      animate('path', { pathLength: 1 }, { duration: 1.5, delay: 1 });\n    }\n  }, [isInView]);\n\n  return (\n    <motion.svg\n      viewBox=\"0 0 100 100\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      ref={scope}\n    >\n      <motion.path\n        pathLength={0}\n        d=\"M96.8458 96.875H3.125V3.125\"\n        stroke=\"white\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M96.8457 45.8333C84.7611 48.4292 80.9749 27.0832 70.3945 26.0415C59.8141 24.9999 46.5882 50 36.0077 50C25.4272 50 17.4918 26.0415 4.26615 29.1665C3.88965 29.2555 3.53032 29.3715 3.18701 29.5128\"\n        stroke=\"#0ACF83\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M3.125 88.5417C16.1458 86.0633 35.4167 64.5833 45.8333 67.8879C56.25 71.1925 68.75 87.7154 77.0833 86.0633C85.4167 84.4108 95.8333 64.5833 95.8333 64.5833\"\n        stroke=\"#FF7262\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M96.8458 16.6667C94.2008 27.0833 83.62 62.5 67.7491 60.4167C51.8787 58.3333 49.2333 10.4167 36.0078 10.4167C16.8579 10.4167 27.7433 55.8183 3.18994 55.9733\"\n        stroke=\"#4044ED\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n    </motion.svg>\n  );\n}\n\nexport default Infograpic;\n","import React, { useEffect } from 'react';\nimport {\n  motion,\n  useAnimate,\n  useInView,\n} from 'framer-motion/dist/framer-motion';\n\nfunction Repair() {\n  const [scope, animate] = useAnimate();\n  const isInView = useInView(scope);\n\n  useEffect(() => {\n    if (isInView) {\n      animate('path', { pathLength: 1 }, { duration: 1, delay: 1 });\n    }\n  }, [isInView]);\n\n  return (\n    <motion.svg\n      viewBox=\"0 0 100 100\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      ref={scope}\n    >\n      <motion.path\n        pathLength={0}\n        d=\"M62.5 78.125H46.875V93.75\"\n        stroke=\"#BFFB4F\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M94.4458 81.1792C92.7908 86.0156 89.5859 90.1707 85.3284 92.9997C81.0708 95.8287 75.9986 97.1735 70.8987 96.8254C65.7988 96.4773 60.9564 94.4559 57.1227 91.0746C53.2889 87.6934 50.6783 83.1414 49.6958 78.125\"\n        stroke=\"#BFFB4F\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M81.25 65.625H96.875V50\"\n        stroke=\"#BFFB4F\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M49.3042 62.5708C50.9592 57.7344 54.1641 53.5793 58.4216 50.7503C62.6792 47.9213 67.7514 46.5766 72.8513 46.9246C77.9512 47.2727 82.7936 49.2941 86.6273 52.6754C90.4611 56.0566 93.0717 60.6086 94.0542 65.625\"\n        stroke=\"#BFFB4F\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M15.625 28.125V65.625H34.375\"\n        stroke=\"white\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M15.625 53.125L26.8292 41.9208C27.4096 41.34 28.0988 40.8793 28.8573 40.565C29.6158 40.2506 30.4289 40.0888 31.25 40.0888C32.0711 40.0888 32.8842 40.2506 33.6427 40.565C34.4012 40.8793 35.0904 41.34 35.6708 41.9208L38.0917 44.3417C38.7633 45.0125 39.5789 45.5216 40.4766 45.8302C41.3744 46.1389 42.3306 46.239 43.2728 46.1229C44.2149 46.0068 45.1183 45.6777 45.9143 45.1604C46.7102 44.6431 47.3779 43.9513 47.8667 43.1375L49.3583 40.6375\"\n        stroke=\"white\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n      <motion.path\n        pathLength={0}\n        d=\"M31.25 84.375H9.375C7.7174 84.375 6.12768 83.7165 4.95558 82.5444C3.78348 81.3723 3.125 79.7826 3.125 78.125V9.375C3.125 7.7174 3.78348 6.12768 4.95558 4.95558C6.12768 3.78348 7.7174 3.125 9.375 3.125H53.6625C55.3189 3.12535 56.9075 3.78326 58.0792 4.95417L70.0458 16.9208C71.2167 18.0925 71.8746 19.6811 71.875 21.3375V31.25\"\n        stroke=\"white\"\n        stroke-width=\"1.5\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n      />\n    </motion.svg>\n  );\n}\n\nexport default Repair;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Summary from '../img/Summary';\nimport Infograpic from '../img/Infograpic';\nimport Repair from '../img/Repair';\n\nconst FeatuersGridContainer = styled.div`\n  @media ${(props) => props.theme.device.laptop} {\n    &.features_grid__4rdKV[data-colums='3'] {\n      display: grid;\n    }\n  }\n  @media ${(props) => props.theme.device.tablet} {\n    &.features_grid__4rdKV[data-colums='2'] {\n      display: grid;\n    }\n  }\n  @media ${(props) => props.theme.device.mobile} {\n    &.features_grid__4rdKV[data-colums='1'] {\n      display: grid;\n    }\n  }\n\n  margin-top: 30px;\n  width: 80%;\n  grid-gap: 20px;\n  display: none;\n\n  &[data-colums='3'] {\n    grid-template-columns: repeat(3, minmax(0, 1fr));\n  }\n\n  &[data-colums='2'] {\n    grid-template-columns: repeat(2, minmax(0, 1fr));\n  }\n\n  &[data-colums='1'] {\n    grid-template-columns: repeat(1, minmax(0, 1fr));\n  }\n`;\n\nconst GridColumn = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n`;\n\nconst GridContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  padding: 24px;\n  box-shadow: rgba(255, 255, 255, 0.14) 0px 0px 0px 1px;\n  border-radius: 12px;\n  cursor: pointer;\n  transition: background-color 0.3s;\n  &:hover {\n    background-color: rgba(255, 255, 255, 0.07);\n  }\n  &:hover .mobile {\n    display: block;\n    opacity: 1;\n  }\n`;\n\nconst ImgWrapper = styled.div`\n  display: flex;\n  padding: 25px 0;\n  /* justify-content: center; */\n  svg {\n    width: 60%;\n  }\n`;\n\nconst FeatureTitle = styled.div`\n  color: ${(props) => props.theme.mainPage.mostHighlightColor};\n  font-size: 22px;\n  font-weight: 800;\n  line-height: 40px;\n`;\n\nconst FeatureDiscription = styled.div`\n  color: ${(props) => props.theme.mainPage.textColor};\n  font-size: 17px;\n  line-height: 24px;\n\n  &.mobile {\n    display: none;\n    opacity: 0;\n  }\n`;\n\nfunction FeatureGrid() {\n  return (\n    <>\n      <FeatuersGridContainer className=\"features_grid__4rdKV\" data-colums=\"3\">\n        <GridColumn>\n          <GridContent>\n            <ImgWrapper>\n              <Summary />\n            </ImgWrapper>\n            <FeatureTitle>\n              <span>Data Summarization</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Datasets can be massive. LIDA summarizes data into a compact but\n              information dense natural language representation used as\n              grounding context for all subsequent operations.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Automated Data Exploration</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Unfamiliar with a dataset? LIDA provides a fully automated mode\n              that generates meaningful visualization goals based on the\n              dataset. EDA for free.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Grammar-Agnostic Visualizations</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Want visualizations created in python in Altair, Matplotlib,\n              Seaborn etc? How about R, C++ ? LIDA is grammar agnostic i.e., can\n              generate visualizations in any grammar represented as code.\n            </FeatureDiscription>\n          </GridContent>\n        </GridColumn>\n        <GridColumn>\n          <GridContent>\n            <ImgWrapper>\n              <Infograpic />\n            </ImgWrapper>\n            <FeatureTitle>\n              <span>Infographics Generation</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Convert data into rich, embellished, engaging stylized\n              infographics using image generation models. Think data stories,\n              personalization, brand, style, marketing etc.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Visualization Explanation</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Get detailed descriptions of visualization code. This has\n              applications in accessibility, data literacy, education, and\n              debugging/sensemaking of visualizations.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Self-Evaluation</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              LLMs like GPT-3.5 and GPT-4 encode visualization best practices.\n              LIDA applies these capabilities in generating multi-dimensional\n              evaluation scores for visualizations represented as code.\n            </FeatureDiscription>\n          </GridContent>\n        </GridColumn>\n        <GridColumn>\n          <GridContent>\n            <ImgWrapper>\n              <Repair />\n            </ImgWrapper>\n            <FeatureTitle>\n              <span>Visualization Repair</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              LIDA provides methods to automatically improve visualizations via\n              self-evaluation feedback or repair visualizations based on user\n              provided or compile feedback.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Visualization Recommendations</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Given some context goals, or an existing visualization, LIDA can\n              recommend additional visualizations that may be useful to the user\n              e.g, for comparison, or to provide additional perspectives.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Lorem ipsum dolor</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              sit amet consectetur adipisicing elit. Similique harum eius\n              debitis nihil delectus consectetur ducimus voluptate repellendus,\n              inventore voluptatem asperiores excepturi, adipisci eum saepe\n              consequuntur repudiandae cum quis! Quos?\n            </FeatureDiscription>\n          </GridContent>\n        </GridColumn>\n      </FeatuersGridContainer>\n      <FeatuersGridContainer className=\"features_grid__4rdKV\" data-colums=\"2\">\n        <GridColumn>\n          <GridContent>\n            <ImgWrapper>\n              <Summary />\n            </ImgWrapper>\n            <FeatureTitle>\n              <span>Data Summarization</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Datasets can be massive. LIDA summarizes data into a compact but\n              information dense natural language representation used as\n              grounding context for all subsequent operations.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <ImgWrapper>\n              <Infograpic />\n            </ImgWrapper>\n            <FeatureTitle>\n              <span>Infographics Generation</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Convert data into rich, embellished, engaging stylized\n              infographics using image generation models. Think data stories,\n              personalization, brand, style, marketing etc.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Automated Data Exploration</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Unfamiliar with a dataset? LIDA provides a fully automated mode\n              that generates meaningful visualization goals based on the\n              dataset. EDA for free.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Grammar-Agnostic Visualizations</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Want visualizations created in python in Altair, Matplotlib,\n              Seaborn etc? How about R, C++ ? LIDA is grammar agnostic i.e., can\n              generate visualizations in any grammar represented as code.\n            </FeatureDiscription>\n          </GridContent>\n        </GridColumn>\n        <GridColumn>\n          <GridContent>\n            <ImgWrapper>\n              <Repair />\n            </ImgWrapper>\n            <FeatureTitle>\n              <span>Visualization Repair</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              LIDA provides methods to automatically improve visualizations via\n              self-evaluation feedback or repair visualizations based on user\n              provided or compile feedback.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Visualization Recommendations</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Given some context goals, or an existing visualization, LIDA can\n              recommend additional visualizations that may be useful to the user\n              e.g, for comparison, or to provide additional perspectives.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Visualization Explanation</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Get detailed descriptions of visualization code. This has\n              applications in accessibility, data literacy, education, and\n              debugging/sensemaking of visualizations.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Self-Evaluation</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              LLMs like GPT-3.5 and GPT-4 encode visualization best practices.\n              LIDA applies these capabilities in generating multi-dimensional\n              evaluation scores for visualizations represented as code.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Lorem ipsum dolor</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              sit amet consectetur adipisicing elit. Similique harum eius\n              debitis nihil delectus consectetur ducimus voluptate repellendus,\n              inventore voluptatem asperiores excepturi, adipisci eum saepe\n              consequuntur repudiandae cum quis! Quos?\n            </FeatureDiscription>\n          </GridContent>\n        </GridColumn>\n      </FeatuersGridContainer>\n      <FeatuersGridContainer className=\"features_grid__4rdKV\" data-colums=\"1\">\n        <GridColumn>\n          <GridContent>\n            <ImgWrapper>\n              <Summary />\n            </ImgWrapper>\n            <FeatureTitle>\n              <span>Data Summarization</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Datasets can be massive. LIDA summarizes data into a compact but\n              information dense natural language representation used as\n              grounding context for all subsequent operations.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <ImgWrapper>\n              <Infograpic />\n            </ImgWrapper>\n            <FeatureTitle>\n              <span>Infographics Generation</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              Convert data into rich, embellished, engaging stylized\n              infographics using image generation models. Think data stories,\n              personalization, brand, style, marketing etc.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <ImgWrapper>\n              <Repair />\n            </ImgWrapper>\n            <FeatureTitle>\n              <span>Visualization Repair</span>\n            </FeatureTitle>\n            <FeatureDiscription>\n              LIDA provides methods to automatically improve visualizations via\n              self-evaluation feedback or repair visualizations based on user\n              provided or compile feedback.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Automated Data Exploration</span>\n            </FeatureTitle>\n            <FeatureDiscription className=\"mobile\">\n              Unfamiliar with a dataset? LIDA provides a fully automated mode\n              that generates meaningful visualization goals based on the\n              dataset. EDA for free.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Grammar-Agnostic Visualizations</span>\n            </FeatureTitle>\n            <FeatureDiscription className=\"mobile\">\n              Want visualizations created in python in Altair, Matplotlib,\n              Seaborn etc? How about R, C++ ? LIDA is grammar agnostic i.e., can\n              generate visualizations in any grammar represented as code.\n            </FeatureDiscription>\n          </GridContent>\n\n          <GridContent>\n            <FeatureTitle>\n              <span>Visualization Explanation</span>\n            </FeatureTitle>\n            <FeatureDiscription className=\"mobile\">\n              Get detailed descriptions of visualization code. This has\n              applications in accessibility, data literacy, education, and\n              debugging/sensemaking of visualizations.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Self-Evaluation</span>\n            </FeatureTitle>\n            <FeatureDiscription className=\"mobile\">\n              LLMs like GPT-3.5 and GPT-4 encode visualization best practices.\n              LIDA applies these capabilities in generating multi-dimensional\n              evaluation scores for visualizations represented as code.\n            </FeatureDiscription>\n          </GridContent>\n\n          <GridContent>\n            <FeatureTitle>\n              <span>Visualization Recommendations</span>\n            </FeatureTitle>\n            <FeatureDiscription className=\"mobile\">\n              Given some context goals, or an existing visualization, LIDA can\n              recommend additional visualizations that may be useful to the user\n              e.g, for comparison, or to provide additional perspectives.\n            </FeatureDiscription>\n          </GridContent>\n          <GridContent>\n            <FeatureTitle>\n              <span>Lorem ipsum dolor</span>\n            </FeatureTitle>\n            <FeatureDiscription className=\"mobile\">\n              sit amet consectetur adipisicing elit. Similique harum eius\n              debitis nihil delectus consectetur ducimus voluptate repellendus,\n              inventore voluptatem asperiores excepturi, adipisci eum saepe\n              consequuntur repudiandae cum quis! Quos?\n            </FeatureDiscription>\n          </GridContent>\n        </GridColumn>\n      </FeatuersGridContainer>\n    </>\n  );\n}\n\nexport default FeatureGrid;\n"],"sourceRoot":""}